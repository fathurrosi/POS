// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using POS.Domain.Entities;

namespace POS.Infrastructure;

public partial class POSContext : DbContext
{
    public POSContext(DbContextOptions<POSContext> options)
        : base(options)
    {
    }
    public POSContext()
    {
    }
    public virtual DbSet<Catalog> Catalogs { get; set; }

    public virtual DbSet<CatalogPrice> CatalogPrices { get; set; }

    public virtual DbSet<CatalogStock> CatalogStocks { get; set; }

    public virtual DbSet<CatalogStockHistory> CatalogStockHistories { get; set; }

    public virtual DbSet<Config> Configs { get; set; }

    public virtual DbSet<CurrentStock> CurrentStocks { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<DailyGrossProfit> DailyGrossProfits { get; set; }

    public virtual DbSet<Hpp> Hpps { get; set; }

    public virtual DbSet<Log> Logs { get; set; }

    public virtual DbSet<Menu> Menus { get; set; }

    public virtual DbSet<Previllage> Previllages { get; set; }

    public virtual DbSet<Profile> Profiles { get; set; }

    public virtual DbSet<Purchase> Purchases { get; set; }

    public virtual DbSet<PurchaseDetail> PurchaseDetails { get; set; }

    public virtual DbSet<Reconcile> Reconciles { get; set; }

    public virtual DbSet<ReconcileDetail> ReconcileDetails { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Sale> Sales { get; set; }

    public virtual DbSet<SaleDetail> SaleDetails { get; set; }

    public virtual DbSet<Supplier> Suppliers { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserRole> UserRoles { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Catalog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_catalog");

            entity.ToTable("Catalog");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Notes).HasColumnType("text");
            entity.Property(e => e.Photo).HasColumnType("image");
            entity.Property(e => e.Type)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.Unit)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CatalogPrice>(entity =>
        {
            entity.ToTable("CatalogPrice");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.BuyPricePerunit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CatalogId).HasColumnName("CatalogID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PriceDate).HasColumnType("datetime");
            entity.Property(e => e.SellPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SupplierCode)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CatalogStock>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CatalogStock");

            entity.Property(e => e.CatalogId).HasColumnName("CatalogID");
            entity.Property(e => e.Colly)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("colly");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Stock).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<CatalogStockHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CatalogStockHistory");

            entity.Property(e => e.CatalogId).HasColumnName("CatalogID");
            entity.Property(e => e.Colly)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("colly");
            entity.Property(e => e.Created).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.Stock).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<Config>(entity =>
        {
            entity.HasKey(e => e.Name);

            entity.ToTable("Config");

            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Value)
                .HasMaxLength(1000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CurrentStock>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CurrentStock");

            entity.Property(e => e.CatalogId).HasColumnName("CatalogID");
            entity.Property(e => e.Coli).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Stock).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_customer");

            entity.ToTable("Customer");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Address)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.FullName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DailyGrossProfit>(entity =>
        {
            entity.HasKey(e => new { e.TransDate, e.CatalogId }).HasName("PK_dailygrossprofit");

            entity.ToTable("DailyGrossProfit");

            entity.Property(e => e.TransDate).HasColumnType("datetime");
            entity.Property(e => e.CatalogId).HasColumnName("CatalogID");
            entity.Property(e => e.GrossProfit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Purchase).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Quantity).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Sale).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<Hpp>(entity =>
        {
            entity.HasKey(e => new { e.TransDate, e.CatalogId }).HasName("PK_hpp");

            entity.ToTable("HPP");

            entity.Property(e => e.PrevHpp)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PrevHPP");
            entity.Property(e => e.PrevStock).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalHpp)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TotalHPP");
            entity.Property(e => e.TotalPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalQty).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<Log>(entity =>
        {
            //entity.HasNoKey().ToTable("Log");
            entity.HasKey(e => new { e.LogDate }).HasName("PK_Log");
            entity.ToTable("Log");
            entity.Property(e => e.ComputerName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Ipaddress)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("IPAddress");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogMessage).IsUnicode(false);
            entity.Property(e => e.LogType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Username)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Menu>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_menu");

            entity.ToTable("Menu");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Code)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.Ico).HasColumnType("image");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ParentId).HasColumnName("ParentID");
            entity.Property(e => e.Shortcut)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Previllage>(entity =>
        {
            entity.HasKey(e => new { e.MenuId, e.RoleId }).HasName("PK_previllage");

            entity.ToTable("Previllage");

            entity.Property(e => e.MenuId).HasColumnName("MenuID");
            entity.Property(e => e.RoleId).HasColumnName("RoleID");
        });

        modelBuilder.Entity<Profile>(entity =>
        {
            entity.ToTable("Profile");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Address)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.Created).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Logo).HasColumnType("image");
            entity.Property(e => e.LogoExtension)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Notes)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Subtitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Title)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Updated).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Website)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Purchase>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_purchase");

            entity.ToTable("Purchase");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.PurchaseDate).HasColumnType("datetime");
            entity.Property(e => e.PurchaseNo)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SupplierCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TotalPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalQty).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<PurchaseDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_purchasedetail");

            entity.ToTable("PurchaseDetail");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CatalogId).HasColumnName("CatalogID");
            entity.Property(e => e.Coli)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("coli");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.PricePerUnit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PurchaseNo)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Qty).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Unit)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Reconcile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_reconcile");

            entity.ToTable("Reconcile");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Description)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.ProccessDate).HasColumnType("datetime");
            entity.Property(e => e.Purchaseno)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("purchaseno");
            entity.Property(e => e.Transactionid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("transactionid");
        });

        modelBuilder.Entity<ReconcileDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_reconciledetail");

            entity.ToTable("ReconcileDetail");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CatalogId).HasColumnName("CatalogID");
            entity.Property(e => e.CatalogPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CatalogPriceDate).HasColumnType("datetime");
            entity.Property(e => e.CatalogQty).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.ProductPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ProductQty).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ReconcileId).HasColumnName("ReconcileID");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_role");

            entity.ToTable("Role");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Sale>(entity =>
        {
            entity.HasKey(e => e.TransactionId).HasName("PK_sale");

            entity.ToTable("Sale");

            entity.Property(e => e.TransactionId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TransactionID");
            entity.Property(e => e.Counter).ValueGeneratedOnAdd();
            entity.Property(e => e.Created).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ExpiredDate).HasColumnType("datetime");
            entity.Property(e => e.MemberId).HasColumnName("MemberID");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.Terminal)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TotalPayment).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalPaymentReturn).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalQty)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.Username)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SaleDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_saledetail");

            entity.ToTable("SaleDetail");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CatalogId).HasColumnName("CatalogID");
            entity.Property(e => e.Coli)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("coli");
            entity.Property(e => e.Discount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Quantity).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TransactionID");
        });

        modelBuilder.Entity<Supplier>(entity =>
        {
            entity.HasKey(e => e.Code).HasName("PK_supplier");

            entity.ToTable("Supplier");

            entity.Property(e => e.Code)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Address).IsUnicode(false);
            entity.Property(e => e.CellPhone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Username);

            entity.ToTable("User");

            entity.Property(e => e.Username)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Ipaddress)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("IPAddress");
            entity.Property(e => e.LastLogin).HasColumnType("datetime");
            entity.Property(e => e.MachineName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .HasMaxLength(1000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UserRole>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_userrole");

            entity.ToTable("UserRole");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.RoleId).HasColumnName("RoleID");
            entity.Property(e => e.Username)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}